lists     --> can contain any combination of object type using list() function
          --> lists can have named elements, access using $ operator

vector()  --> multiple copies of the same object type
          --> can also use the c() function to concatenate objects together to form a vector
          --> if objects are of different types then R will perform coercion to transform every object into the same type
          --> can name elements using name() or vect <- c(foo=11,bar=2,norf=NA)

as.*      --> explicit type conversion

is.na(), is.nan()   --> undefined or missing data values, NA, NaN
                    --> complete.cases() function performs is.* on multiple vectors
is.element()  --> similar to set containment and python "in" operator.
              --> %in% for finding values with specific characteristics.

numeric values --> double precision floats, integer uses suffix L, NaN for not a number

factor values   --> factor() function, represent categorical data, ordered or unordered, can be thought of as an integer with a label
                --> see attributes(), table(), unclass()
                --> use gl() function to generate factors and interaction() function for multilevel factors.

seq() --> will generate a sequence of values.

attributes() --> access attributes or properties of a data type
              --> dim() and class() are similar

assignment operator is <-, the <<- operator will assign to variables outside of the current scope.
                          For example, to a predefined variable in the parent scope.

%operator% --> %*% will perform matrix multiplication, otherwise if the normal operators are used for vectors or matrices
                you will have element-wise operations


matrix(values,nrow=,ncol=)  --> described as an integer vector of length two (nrow,ncol)
                            --> matrices are created column-wise so the values will iterate down the columns
                            --> can coerce vector objects into matrix objects by assigning a dim() using c() function
                            --> or using the cbind() and rbind() functions, column and row resp
                            --> dimnames() to assign row and column names, generally as a list
                            --> subsetting returns a vector, disable by using drop=FALSE

data.frame()  --> a list of lists, where each element is used to represent a column
              --> read.table(), read.csv()
              --> convert to matrix using data.matrix()
              --> attribute data.names
              --> colnames() to set column names
              --> nrow, ncol for number of rows and columns

subsetting objects in R, aka element access and slicing
              --> [ , [[, and $ extracts elements of a list or frame by name, be aware of return types
              --> similar to python and matlab, accepts logical indices and expressions
              --> missing indices for a dimension denotes all elements
              --> partial matching using , exact=FALSE
              --> can access using vector indices
              --> subset() function
              --> to return the indices use the which() function on the logical expression

paste() --> similar to the string join function in python

identical() --> compare objects

lapply --> functional style similar to map and fold functions. Many versions and also see split().
        --> can use ... notation for passing named function arguments.
split() --> compare to subset() function
apply  --> has special functions defined for matrices such as row and column means or sums. Also see tapply() and mapply().

sort() and order() --> used for sorting though order() is more general

do.call() -->

Aggregating data --> use plyr package and the aggregate() or ddply() functions.


str() --> similar to the python str function.

summary() --> returns the summary statistics of the argument passed.

simulation
  seed --> use to make random number generation simulations reproducible.
  rnorm, dnorm, pnorm, rpois --> functions for probability distributions in R.
                          --> d is for density,
                          --> r is for random number generation,
                          --> p is for cumulative distribution,
                          --> q is for quantile function.
                          --> can use basic operations to combine and produce complicated models, very similar to the mathematical notation.
  sample() --> a function to randomly sample from an arbitrary distribution with or without replacement.

dates and times
R using the Date package and time follows POSIX
    --> as.Date(), as.POSIXlt() and as.POSIXct() and then check names() or class()
    --> strptime() function is very useful for dealing with strange date formats

profiling and code optimisation
  system.time(), Rprof(), summaryRprof()

optimisation in R
  optim, nlm, optimize --> function which require a function pointer or reference to be passed as a argument.
                      --> It is useful to create constructor functions to generate these, for example, the negative log likelihood function.

reading and writing data
list.files(path=directory, pattern="*.csv")  --> to list files in a directory, use rbind to join multiple data frames

read.table(), write.table()   --> set colClasses using sapply() and class() functions
                              --> also use unix command wc to find row number
read.csv()
readLines, writeLines   --> iterate through a text file
source, dump      --> reading R code files
dget, dput        --> reading R code files
load, save        --> reading in saved R workspaces
unserialize, serilize --> reading R objects in binary form

connection interfaces   --> very similar to python
file()        --> opens connection to a file
gzfile()      --> gzip connection
bzfile()      --> bzip2 connection
url()         --> web page

